{"version":3,"sources":["components/Locate.js","iconPerson.js","useGeolocation.js","components/Map.js","App.js","reportWebVitals.js","index.js"],"names":["Locate","L","Icon","iconUrl","iconRetinaUrl","iconAnchor","popupAnchor","shadowUrl","shadowSize","shadowAnchor","iconSize","Point","className","props","onClick","setLocate","setIsDragged","console","log","src","alt","useGeolocation","enableHighAccuracy","maximumAge","timeout","callback","useState","accuracy","altitude","altitudeAccuracy","heading","latitude","longitude","speed","timestamp","error","coordinates","setCoordinates","useEffect","didCancel","watchId","updateCoordinates","coords","Function","setError","navigator","geolocation","getCurrentPosition","watchPosition","clearWatch","Map","MapContainer","center","zoom","TileLayer","url","attribution","locate","Marker","position","Popup","Polyline","pathOptions","color","positions","App","bench","area","table","statue","lookout","history","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.681e9b65.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./locate.css\";\r\n\r\nexport const Locate = (props) => {\r\n  return (\r\n    <button\r\n      className=\"locate\"\r\n      onClick={() => {\r\n        props.setLocate(true);\r\n        props.setIsDragged(false);\r\n        console.log(\"Locate\", \"false\");\r\n      }}\r\n    >\r\n      <img\r\n        src=\"https://www.flaticon.com/svg/static/icons/svg/744/744848.svg\"\r\n        alt=\"compass-locate me\"\r\n      ></img>\r\n    </button>\r\n  );\r\n};\r\n","import L from \"leaflet\";\r\n\r\n// const iconPerson = new L.Icon({\r\n//     iconUrl: require('../img/marker-pin-person.svg'),\r\n//     iconRetinaUrl: require('../img/marker-pin-person.svg'),\r\n//     iconAnchor: null,\r\n//     popupAnchor: null,\r\n//     shadowUrl: null,\r\n//     shadowSize: null,\r\n//     shadowAnchor: null,\r\n//     iconSize: new L.Point(60, 75),\r\n//     className: 'leaflet-div-icon'\r\n// });\r\n\r\n// var myIcon = L.icon({\r\n//     iconUrl: 'my-icon.png',\r\n//     iconSize: [38, 95],\r\n//     iconAnchor: [22, 94],\r\n//     popupAnchor: [-3, -76],\r\n//     shadowUrl: 'my-icon-shadow.png',\r\n//     shadowSize: [68, 95],\r\n//     shadowAnchor: [22, 94]\r\n// });\r\n\r\nconst iconPerson = new L.Icon({\r\n  iconUrl: \"https://www.flaticon.com/svg/static/icons/svg/3791/3791253.svg\",\r\n  iconRetinaUrl:\r\n    \"https://www.flaticon.com/svg/static/icons/svg/3791/3791253.svg\",\r\n  iconAnchor: null,\r\n  popupAnchor: null,\r\n  shadowUrl: null,\r\n  shadowSize: null,\r\n  shadowAnchor: null,\r\n  iconSize: new L.Point(60, 75),\r\n  className: \"leaflet-div-icon\",\r\n});\r\n\r\nexport { iconPerson };\r\n","import {\r\n  useEffect,\r\n  useState,\r\n  callback,\r\n  enableHighAccuracy,\r\n  maximumAge,\r\n  timeout,\r\n} from \"react\";\r\n\r\n//https://www.npmjs.com/package/react-hook-geolocation\r\n\r\nexport const useGeolocation = (\r\n  { enableHighAccuracy, maximumAge, timeout } = {},\r\n  callback\r\n) => {\r\n  const [coordinates, setCoordinates] = useState({\r\n    accuracy: null,\r\n    altitude: null,\r\n    altitudeAccuracy: null,\r\n    heading: null,\r\n    latitude: null,\r\n    longitude: null,\r\n    speed: null,\r\n    timestamp: null,\r\n    error: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    let didCancel;\r\n    const updateCoordinates = ({ coords = {}, timestamp }) => {\r\n      const {\r\n        accuracy,\r\n        altitude,\r\n        altitudeAccuracy,\r\n        heading,\r\n        latitude,\r\n        longitude,\r\n        speed,\r\n      } = coords;\r\n      if (!didCancel) {\r\n        setCoordinates({\r\n          accuracy,\r\n          altitude,\r\n          altitudeAccuracy,\r\n          heading,\r\n          latitude,\r\n          longitude,\r\n          speed,\r\n          timestamp,\r\n          error: null,\r\n        });\r\n        if (callback instanceof Function) {\r\n          callback({\r\n            accuracy,\r\n            altitude,\r\n            altitudeAccuracy,\r\n            heading,\r\n            latitude,\r\n            longitude,\r\n            speed,\r\n            timestamp,\r\n            error: null,\r\n          });\r\n        }\r\n      }\r\n    };\r\n\r\n    const setError = (error) => {\r\n      if (!didCancel) {\r\n        updateCoordinates({\r\n          accuracy: null,\r\n          altitude: null,\r\n          altitudeAccuracy: null,\r\n          heading: null,\r\n          latitude: null,\r\n          longitude: null,\r\n          speed: null,\r\n          timestamp: null,\r\n          error,\r\n        });\r\n      }\r\n    };\r\n\r\n    let watchId;\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(updateCoordinates, setError);\r\n      watchId = navigator.geolocation.watchPosition(\r\n        updateCoordinates,\r\n        setError,\r\n        { enableHighAccuracy, maximumAge, timeout }\r\n      );\r\n    }\r\n    return () => {\r\n      if (watchId) {\r\n        navigator.geolocation.clearWatch(watchId);\r\n      }\r\n      didCancel = true;\r\n    };\r\n  }, []);\r\n\r\n  return coordinates;\r\n};\r\n\r\nexport default useGeolocation;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useGeolocation } from \"../useGeolocation\";\r\n\r\nimport \"./map.css\";\r\nimport {\r\n  MapContainer,\r\n  TileLayer,\r\n  Marker,\r\n  Popup,\r\n  Polyline,\r\n} from \"react-leaflet\";\r\n\r\nexport const Map = (props) => {\r\n  const DEF_LAT = 32.9056256;\r\n  const DEF_LNG = 35.3107968;\r\n\r\n  const geolocation = useGeolocation({\r\n    enableHighAccuracy: true,\r\n    maximumAge: 15000,\r\n    timeout: 12000,\r\n  });\r\n\r\n  console.log(geolocation);\r\n\r\n  const PolylineA = [\r\n    [32.9056356, 35.3103968],\r\n    [32.9016356, 35.3109938],\r\n    [32.9096326, 35.3117238],\r\n  ];\r\n  const PolylineB = [\r\n    [32.9056356, 35.3103968],\r\n    [32.9026356, 35.3102938],\r\n    [32.9056326, 35.3107238],\r\n  ];\r\n\r\n  const limeOptions = { color: \"lime\" };\r\n  const purpleOptions = { color: \"purple\" };\r\n\r\n  return (\r\n    <MapContainer center={[DEF_LAT, DEF_LNG]} zoom={12}>\r\n      <TileLayer\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors'\r\n      />\r\n      {props.locate && (\r\n        <Marker position={[geolocation.latitude, geolocation.longitude]}>\r\n          <Popup>HI~!!!!</Popup>\r\n        </Marker>\r\n      )}\r\n      )\r\n      <Polyline pathOptions={limeOptions} positions={PolylineA} />\r\n      <Polyline pathOptions={purpleOptions} positions={PolylineB} />\r\n    </MapContainer>\r\n  );\r\n};\r\n","import {\n  useEffect,\n  useState,\n  callback,\n  enableHighAccuracy,\n  maximumAge,\n  timeout,\n} from \"react\";\n\nimport { iconPerson } from \"./iconPerson\";\nimport \"./App.css\";\nimport { Locate } from \"./components/Locate\";\nimport { Map } from \"./components/Map\";\n\nfunction App() {\n  const [isDragged, setIsDragged] = useState(false);\n  const [locate, setLocate] = useState(false);\n  const [displayPoiType, setDisplayPoiType] = useState({\n    bench: false,\n    area: true,\n    table: false,\n    statue: true,\n    lookout: true,\n    history: true,\n  });\n\n  return (\n    <>\n      <Locate\n        locate={locate}\n        setLocate={setLocate}\n        setIsDragged={setIsDragged}\n      ></Locate>\n      <Map locate={locate}></Map>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}