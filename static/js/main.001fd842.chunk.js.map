{"version":3,"sources":["components/Locate.js","useGeolocation.js","icons/marker.svg","components/Map.js","App.js","reportWebVitals.js","index.js"],"names":["Locate","props","className","onClick","setLocate","setIsDragged","console","log","src","alt","useGeolocation","enableHighAccuracy","maximumAge","timeout","callback","useState","accuracy","altitude","altitudeAccuracy","heading","latitude","longitude","speed","timestamp","error","coordinates","setCoordinates","useEffect","didCancel","watchId","updateCoordinates","coords","Function","setError","navigator","geolocation","getCurrentPosition","watchPosition","clearWatch","FindLocation","useMapEvents","click","e","latlng","move","unload","load","zoom","moveend","locationfound","location","locationerror","popupopen","popupclose","ChangeView","center","map","useMap","lat","lng","setView","Map","setCenter","NewCenter","useMapEvent","myIcon","L","Icon","iconUrl","icon","iconRetinaUrl","iconAnchor","popupAnchor","shadowUrl","shadowSize","shadowAnchor","iconSize","Point","MapContainer","whenCreated","whenReady","TileLayer","url","attribution","locate","Marker","position","Popup","eventHandlers","Polyline","pathOptions","color","positions","App","isDragged","bench","area","table","statue","lookout","history","displayPoiType","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.001fd842.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./locate.css\";\r\n\r\nexport const Locate = (props) => {\r\n  return (\r\n    <button\r\n      className=\"locate\"\r\n      onClick={() => {\r\n        props.setLocate(true);\r\n        props.setIsDragged(false);\r\n        console.log(\"Locate\", \"false\");\r\n      }}\r\n    >\r\n      <img\r\n        src=\"https://www.flaticon.com/svg/static/icons/svg/744/744848.svg\"\r\n        alt=\"compass-locate me\"\r\n      ></img>\r\n    </button>\r\n  );\r\n};\r\n","import {\r\n  useEffect,\r\n  useState,\r\n  callback,\r\n  enableHighAccuracy,\r\n  maximumAge,\r\n  timeout,\r\n} from \"react\";\r\n\r\n//https://www.npmjs.com/package/react-hook-geolocation\r\n\r\nexport const useGeolocation = (\r\n  { enableHighAccuracy, maximumAge, timeout } = {},\r\n  callback\r\n) => {\r\n  const [coordinates, setCoordinates] = useState({\r\n    accuracy: null,\r\n    altitude: null,\r\n    altitudeAccuracy: null,\r\n    heading: null,\r\n    latitude: null,\r\n    longitude: null,\r\n    speed: null,\r\n    timestamp: null,\r\n    error: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    let didCancel;\r\n    const updateCoordinates = ({ coords = {}, timestamp }) => {\r\n      const {\r\n        accuracy,\r\n        altitude,\r\n        altitudeAccuracy,\r\n        heading,\r\n        latitude,\r\n        longitude,\r\n        speed,\r\n      } = coords;\r\n      if (!didCancel) {\r\n        setCoordinates({\r\n          accuracy,\r\n          altitude,\r\n          altitudeAccuracy,\r\n          heading,\r\n          latitude,\r\n          longitude,\r\n          speed,\r\n          timestamp,\r\n          error: null,\r\n        });\r\n        if (callback instanceof Function) {\r\n          callback({\r\n            accuracy,\r\n            altitude,\r\n            altitudeAccuracy,\r\n            heading,\r\n            latitude,\r\n            longitude,\r\n            speed,\r\n            timestamp,\r\n            error: null,\r\n          });\r\n        }\r\n      }\r\n    };\r\n\r\n    const setError = (error) => {\r\n      if (!didCancel) {\r\n        updateCoordinates({\r\n          accuracy: null,\r\n          altitude: null,\r\n          altitudeAccuracy: null,\r\n          heading: null,\r\n          latitude: null,\r\n          longitude: null,\r\n          speed: null,\r\n          timestamp: null,\r\n          error,\r\n        });\r\n      }\r\n    };\r\n\r\n    let watchId;\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(updateCoordinates, setError);\r\n      watchId = navigator.geolocation.watchPosition(\r\n        updateCoordinates,\r\n        setError,\r\n        { enableHighAccuracy, maximumAge, timeout }\r\n      );\r\n    }\r\n    return () => {\r\n      if (watchId) {\r\n        navigator.geolocation.clearWatch(watchId);\r\n      }\r\n      didCancel = true;\r\n    };\r\n  }, []);\r\n\r\n  return coordinates;\r\n};\r\n\r\nexport default useGeolocation;\r\n","export default __webpack_public_path__ + \"static/media/marker.218b2e3e.svg\";","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useGeolocation } from \"../useGeolocation\";\r\nimport { CurrentPosition } from \"./CurrentPosition\";\r\n\r\nimport \"./map.css\";\r\nimport {\r\n  MapContainer,\r\n  TileLayer,\r\n  Marker,\r\n  Popup,\r\n  Polyline,\r\n  useMapEvents,\r\n  useMapEvent,\r\n  useMap,\r\n} from \"react-leaflet\";\r\n\r\nimport L from \"leaflet\";\r\n\r\nimport icon from \"../icons/marker.svg\";\r\n\r\n// import { Routes } from \"./Routes\";\r\n// import { POIs } from \"./POIs\";\r\n// import { UserLocationTimer } from \"./UserLocationTimer\";\r\n\r\n// import { InfoRoute } from \"./InfoRoute\";\r\n// import { InfoPOI } from \"./InfoPOI\";\r\n\r\n// import mapPOIs from \"./../mapPOIs/mapPOIs\";\r\n// import mapStyles from \"./../mapStyles/mapStyles\";\r\n\r\nfunction FindLocation() {\r\n  //Hook attaching the provided LeafletEventHandlerFnMap event handlers to the map instance\r\n  //and returning the instance in any descendant of a MapContainer.\r\n  const map = useMapEvents({\r\n    click: (e) => {\r\n      console.log(\"LOCATING\", e.latlng);\r\n    },\r\n    move: () => {\r\n      console.log(\"move\");\r\n    },\r\n    unload: () => {\r\n      console.log(\"unload\");\r\n    },\r\n    load: () => {\r\n      console.log(\"load\");\r\n    },\r\n    zoom: () => {\r\n      console.log(\"zoom\");\r\n    },\r\n    moveend: () => {\r\n      console.log(\"moveend\");\r\n    },\r\n    locationfound: (location) => {\r\n      console.log(\"location found:\", location);\r\n    },\r\n    locationerror: (location) => {\r\n      console.log(\"locationerror:\", location);\r\n    },\r\n    popupopen: () => {\r\n      console.log(\"popupopen\");\r\n    },\r\n    popupclose: () => {\r\n      console.log(\"popupclose\");\r\n    },\r\n  });\r\n  return null;\r\n}\r\n\r\nfunction ChangeView({ center, zoom }) {\r\n  const map = useMap();\r\n\r\n  if (center.lat && center.lng && zoom) {\r\n    map.setView(center, zoom);\r\n  }\r\n  return null;\r\n}\r\nexport const Map = (props) => {\r\n  // const [pois, setPois] = useState(mapPOIs);\r\n  // const [markers, setMarkers] = useState([]);\r\n  // const [userLocationCoords, setUserLocationCoords] = useState(null);\r\n  // const [selected, setSelected] = useState(null);\r\n  // const [selectedRoute, setSelectedRoute] = useState(null);\r\n  const [center, setCenter] = useState({\r\n    lat: 32.760803,\r\n    lng: 35.020159,\r\n  });\r\n\r\n  function NewCenter() {\r\n    //Hook attaching a single event handler to the map instance\r\n    //and returning the instance in any descendant of a MapContainer.\r\n\r\n    const map = useMapEvent(\"dblclick\", () => {\r\n      setCenter({\r\n        lat: 32.760803,\r\n        lng: 35.020159,\r\n      });\r\n\r\n      console.log(\"seCenter\");\r\n    });\r\n    return null;\r\n  }\r\n  const geolocation = useGeolocation({\r\n    enableHighAccuracy: true,\r\n    maximumAge: 15000,\r\n    timeout: 12000,\r\n  });\r\n\r\n  console.log(\"geolocation: \", geolocation);\r\n\r\n  const PolylineA = [\r\n    [32.9056356, 35.3103968],\r\n    [32.9016356, 35.3109938],\r\n    [32.9096326, 35.3117238],\r\n  ];\r\n  const PolylineB = [\r\n    [32.9056356, 35.3103968],\r\n    [32.9026356, 35.3102938],\r\n    [32.9056326, 35.3107238],\r\n  ];\r\n\r\n  const limeOptions = { color: \"lime\" };\r\n  const purpleOptions = { color: \"purple\" };\r\n\r\n  //Except for its children, MapContainer props are immutable:\r\n  // changing them after they have been set a first time will have no effect\r\n  // on the Map instance or its container. The Leaflet Map instance created by\r\n  // the MapContainer element can be accessed by child components using one of\r\n  // the provided hooks or the MapConsumer component.\r\n\r\n  const myIcon = new L.Icon({\r\n    iconUrl: icon,\r\n    iconRetinaUrl: icon,\r\n    iconAnchor: null,\r\n    popupAnchor: [0, -15],\r\n    shadowUrl: null,\r\n    shadowSize: null,\r\n    shadowAnchor: null,\r\n    iconSize: new L.Point(30, 45),\r\n    className: \"leaflet-div-icon\",\r\n  });\r\n\r\n  return (\r\n    <MapContainer\r\n      center={[center.lat, center.lng]}\r\n      zoom={18}\r\n      whenCreated={() => {\r\n        console.log(\"created\");\r\n      }}\r\n      whenReady={() => {\r\n        console.log(\"ready!\");\r\n      }}\r\n    >\r\n      <TileLayer\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors'\r\n      />\r\n      {props.locate && !geolocation.error && (\r\n        <Marker\r\n          position={[geolocation.latitude, geolocation.longitude]}\r\n          icon={myIcon}\r\n        >\r\n          <Popup>HI~!!!!</Popup>\r\n        </Marker>\r\n      )}\r\n      )\r\n      <Marker\r\n        position={[50.5, 30.5]}\r\n        eventHandlers={{\r\n          click: () => {\r\n            console.log(\"marker clicked\");\r\n          },\r\n        }}\r\n      />\r\n      <Polyline\r\n        pathOptions={limeOptions}\r\n        positions={PolylineA}\r\n        eventHandlers={{\r\n          click: () => {\r\n            console.log(\"Polyline A clicked\");\r\n          },\r\n        }}\r\n      >\r\n        <Popup>HI!!!!!!!1111~!!!!</Popup>\r\n      </Polyline>\r\n      <Polyline\r\n        pathOptions={purpleOptions}\r\n        positions={PolylineB}\r\n        eventHandlers={{\r\n          click: () => {\r\n            console.log(\"Polyline B clicked\");\r\n          },\r\n        }}\r\n      >\r\n        <Popup>HI!!!!!!!12222~!!!!</Popup>\r\n      </Polyline>\r\n      <FindLocation />\r\n      <NewCenter />\r\n      <ChangeView center={[center.lat, center.lng]} zoom={18} />\r\n    </MapContainer>\r\n  );\r\n};\r\n","import { useState } from \"react\";\n\nimport \"./App.css\";\nimport { Locate } from \"./components/Locate\";\nimport { Map } from \"./components/Map\";\n\nfunction App() {\n  const [isDragged, setIsDragged] = useState(false);\n  const [locate, setLocate] = useState(false);\n  const [displayPoiType, setDisplayPoiType] = useState({\n    bench: false,\n    area: true,\n    table: false,\n    statue: true,\n    lookout: true,\n    history: true,\n  });\n\n  return (\n    <>\n      <Locate\n        locate={locate}\n        setLocate={setLocate}\n        setIsDragged={setIsDragged}\n      ></Locate>\n      <Map\n        locate={locate}\n        setIsDragged={setIsDragged}\n        isDragged={isDragged}\n        displayPoiType={displayPoiType}\n      ></Map>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}